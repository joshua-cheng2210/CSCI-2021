==897== Memcheck, a memory error detector
==897== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==897== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==897== Command: ./test_el_malloc Stress\ 1
==897== Parent PID: 859
==897== 
==897== Invalid read of size 8
==897==    at 0x10AF55: el_block_above (el_malloc.c:84)
==897==    by 0x10B568: el_merge_block_with_above (el_malloc.c:397)
==897==    by 0x10B6D2: el_free (el_malloc.c:430)
==897==    by 0x10AA4D: main (test_el_malloc.c:466)
==897==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==897== 
==897== 
==897== Process terminating with default action of signal 11 (SIGSEGV)
==897==  Access not within mapped region at address 0x0
==897==    at 0x10AF55: el_block_above (el_malloc.c:84)
==897==    by 0x10B568: el_merge_block_with_above (el_malloc.c:397)
==897==    by 0x10B6D2: el_free (el_malloc.c:430)
==897==    by 0x10AA4D: main (test_el_malloc.c:466)
==897==  If you believe this happened as a result of a stack
==897==  overflow in your program's main thread (unlikely but
==897==  possible), you can try to increase the size of the
==897==  main thread stack using the --main-stacksize= flag.
==897==  The main thread stack size used in this run was 8388608.
==897== 
==897== HEAP SUMMARY:
==897==     in use at exit: 0 bytes in 0 blocks
==897==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==897== 
==897== All heap blocks were freed -- no leaks are possible
==897== 
==897== For lists of detected and suppressed errors, rerun with: -s
==897== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
