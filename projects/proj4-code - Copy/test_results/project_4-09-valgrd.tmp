==893== Memcheck, a memory error detector
==893== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==893== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==893== Command: ./test_el_malloc EL\ Demo
==893== Parent PID: 859
==893== 
==893== Invalid read of size 8
==893==    at 0x10AFA1: el_block_below (el_malloc.c:102)
==893==    by 0x10B62A: el_merge_block_with_above (el_malloc.c:408)
==893==    by 0x10B6B6: el_free (el_malloc.c:428)
==893==    by 0x10A66D: main (test_el_malloc.c:385)
==893==  Address 0x5ffffffffff8 is not stack'd, malloc'd or (recently) free'd
==893== 
==893== 
==893== Process terminating with default action of signal 11 (SIGSEGV)
==893==  Access not within mapped region at address 0x5FFFFFFFFFF8
==893==    at 0x10AFA1: el_block_below (el_malloc.c:102)
==893==    by 0x10B62A: el_merge_block_with_above (el_malloc.c:408)
==893==    by 0x10B6B6: el_free (el_malloc.c:428)
==893==    by 0x10A66D: main (test_el_malloc.c:385)
==893==  If you believe this happened as a result of a stack
==893==  overflow in your program's main thread (unlikely but
==893==  possible), you can try to increase the size of the
==893==  main thread stack using the --main-stacksize= flag.
==893==  The main thread stack size used in this run was 8388608.
==893== 
==893== HEAP SUMMARY:
==893==     in use at exit: 0 bytes in 0 blocks
==893==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==893== 
==893== All heap blocks were freed -- no leaks are possible
==893== 
==893== For lists of detected and suppressed errors, rerun with: -s
==893== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
