==885== Memcheck, a memory error detector
==885== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==885== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==885== Command: ./test_el_malloc Four\ Allocs\ Free\ Ver3
==885== Parent PID: 859
==885== 
==885== Invalid read of size 8
==885==    at 0x10AFA1: el_block_below (el_malloc.c:102)
==885==    by 0x10B62A: el_merge_block_with_above (el_malloc.c:408)
==885==    by 0x10B6B6: el_free (el_malloc.c:428)
==885==    by 0x10A236: main (test_el_malloc.c:305)
==885==  Address 0x5ffffffffff8 is not stack'd, malloc'd or (recently) free'd
==885== 
==885== 
==885== Process terminating with default action of signal 11 (SIGSEGV)
==885==  Access not within mapped region at address 0x5FFFFFFFFFF8
==885==    at 0x10AFA1: el_block_below (el_malloc.c:102)
==885==    by 0x10B62A: el_merge_block_with_above (el_malloc.c:408)
==885==    by 0x10B6B6: el_free (el_malloc.c:428)
==885==    by 0x10A236: main (test_el_malloc.c:305)
==885==  If you believe this happened as a result of a stack
==885==  overflow in your program's main thread (unlikely but
==885==  possible), you can try to increase the size of the
==885==  main thread stack using the --main-stacksize= flag.
==885==  The main thread stack size used in this run was 8388608.
==885== 
==885== HEAP SUMMARY:
==885==     in use at exit: 0 bytes in 0 blocks
==885==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==885== 
==885== All heap blocks were freed -- no leaks are possible
==885== 
==885== For lists of detected and suppressed errors, rerun with: -s
==885== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
