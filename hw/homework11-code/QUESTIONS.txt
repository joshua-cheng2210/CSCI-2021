                           _________________

                            HW 11 QUESTIONS
                           _________________


PROBLEM 1: Virtual Memory and pmap
==================================

(A) memory_parts memory areas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the source code for the provided `memory_parts.c'
  program. Identify what region of program memory you expect the
  following variables to be allocated into:
  - global_arr[]
  - stack_arr[]
  - heap_arr

gloabl and heap memory are together. and stack memory is at a different place

(B) Running memory_parts and pmap
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compile the `memory_parts' using the provided Makefile.
  ,----
  | > make memory_parts
  `----
  Run the program and note that it prints several pieces of information
  - The addresses where several of the variables are allocated
  - Its Process ID (PID) which is a unique number used to identify the
    running program. This is an integer.
  For example, the output might be
  ,----
  | > ./memory-parts
  | 0x5605a7c271e9 : main()
  | 0x5605a7c2a0c0 : global_arr
  | 0x7ffe5ff7d600 : stack_arr
  | 0x5605a92442a0 : heap_arr
  | 0x7f1fa7303000 : mmap'd file
  | 0x600000000000 : mmap'd block1
  | 0x600000001000 : mmap'd block2
  | my pid is 8406
  | press any key to continue
  `----
  so the program's PID is 8406.

  The program will also stop at this point until a key is pressed. DO
  NOT PRESS A KEY YET.

  Open another terminal and type the following command in that new
  terminal.
  ,----
  | > pmap THE-PID-NUMBER-THAT-WAS-PRINTED-EARLIER -> pmap 231443
  `----

  Paste the output of pmap below.

0000555555554000      4K r---- memory_parts
0000555555555000      4K r-x-- memory_parts
0000555555556000      4K r---- memory_parts
0000555555557000      4K r---- memory_parts
0000555555558000      4K rw--- memory_parts
0000555555559000      4K rw---   [ anon ]
000055555555a000    132K rw---   [ anon ]
0000600000000000      8K rw---   [ anon ]
00007ffff7c00000    160K r---- libc.so.6
00007ffff7c28000   1620K r-x-- libc.so.6
00007ffff7dbd000    352K r---- libc.so.6
00007ffff7e15000     16K r---- libc.so.6
00007ffff7e19000      8K rw--- libc.so.6
00007ffff7e1b000     52K rw---   [ anon ]
00007ffff7f70000     12K rw---   [ anon ]
00007ffff7fbb000      8K rw---   [ anon ]
00007ffff7fbd000     16K r----   [ anon ]
00007ffff7fc1000      8K r-x--   [ anon ]
00007ffff7fc3000      8K r---- ld-linux-x86-64.so.2
00007ffff7fc5000    168K r-x-- ld-linux-x86-64.so.2
00007ffff7fef000     44K r---- ld-linux-x86-64.so.2
00007ffff7ffa000      4K r---- gettysburg.txt
00007ffff7ffb000      8K r---- ld-linux-x86-64.so.2
00007ffff7ffd000      8K rw--- ld-linux-x86-64.so.2
00007ffffffdd000    136K rw---   [ stack ]
ffffffffff600000      4K --

(C) Program Addresses vs Mapped Addresses
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  pmap prints out the virtual address space table for the program. The
  leftmost column is a virtual address mapped by the OS for the program
  to some physical location. The next column is the size of the area of
  memory associated with that starting address. The 3rd column contains
  permissions of the program has for the memory area: r for read, w for
  write, and x for execute. The final column is contains any identifying
  information about the memory area that pmap can discern.

  Compare the addresses of variables and functions from the paused
  program to the output. Try to determine the virtual address space in
  which each variable resides and what region of program memory that
  virtual address must belong to (stack, heap, globals, text).  In some
  cases, the identifying information provided by pmap may make this
  obvious.


(D) Min Size of Mapped Areas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The minimum size of any virtual area of memory appears to be 4K. Why
  is this the case?


(E) Additional Observations
~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Notice that in addition to the "normal" variables that are mapped,
  there is also an entry for the mmap()'d file 'gettysburg.txt' in the
  virtual address table.  The mmap() function is explored in the next
  problem but note its calling sequence which involves use of a couple
  of system calls:
  1. `open()' which is a low level file opening call which returns a
     numeric file descriptor.
  2. `fstat()' which obtains information such as the size for an open file
     based on its numeric file descriptor. The `stat() / fstat()' system
     calls are used to ask the Operating System information about
     files such as their size, modification times, and access
     permissions. This system call is studied more in Operating Systems
     courses.

  Finally there are additional calls to `mmap()' which allocate memory
  to the program at a specific virtual address. Similar code to this is
  often used to allocate and expand the heap area of memory for programs
  in implementations of `malloc()'.


PROBLEM 2: mmap() and binary files
==================================

  This problem walks through the program `print_department.c' which parses a
  binary file and prints part of its contents. `mmap()' is used to provide a
  convenient view of the file as a raw byte sequence. The questions below will
  guide you through understanding this program.

  Compile and run the `print_departments' program to produce output that
  looks like the following.

  ,----
  | > make print_department
  | gcc -Wall -g -Og -o print_department print_department.c
  |
  | > ./print_department
  | usage: print_department <file.dat> <department>
  |   department is one of
  |   CS : computer science department
  |   EE : electrical engineering department
  |   IT : information technology department
  |
  | > file cse_depts.dat
  | cse_depts.dat: data
  |
  | > ./print_department cse_depts.dat CS
  | Dept Name: CS Offset: 104
  | Dept Name: EE Offset: 2152
  | Dept Name: IT Offset: 3688
  |
  | 8 Contacts for CS department
  | Arindam Banerjee <baner029@umn.edu>
  | Daniel Boley <boley@umn.edu>
  | Abhishek Chandra <chandra@umn.edu>
  | David Hung-Chang Du <du@umn.edu>
  | Maria Gini <gini@umn.edu>
  | Stephen Guy <sjguy@umn.edu>
  | Tian He <tianhe@umn.edu>
  | Mats Heimdahl <heimdahl@umn.edu>
  `----

  Answer the following questions to show you understand how this program
  works.


(A) Descriptive Comments of Binary Layout
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the comments at the top of the `print_department.c'
  program. Below, paste the description of the binary "department
  directory" structure or describe it in your own words. Make sure to
  include which information/structs appear first and how the sizes of
  parts of the file appear earlier.


  the binary finle will be read into 3 structures in the order of file_header_t, dept_offset_t, contact_t


(B) Casting mmap()'d bytes
~~~~~~~~~~~~~~~~~~~~~~~~~~

  The initial setup of the program uses `mmap()' to assign a pointer to
  variable `char *file_bytes'.  This pointer will refer directly to the
  bytes of the binary file.

  Examine the lines
  ,----
  |   ////////////////////////////////////////////////////////////////////////////////
  |   // CHECK the file_header_t struct for integrity, size of department array
  |   file_header_t *header = (file_header_t *) file_bytes; // binary header struct is first thing in the file
  `----

  Explain what is happening here: what value will the variable `header'
  get and how is it used in subsequent lines?

  it is a memory address pointing to the start of the file


(C) Pointer Arithmetic in Byte Arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  After finishing with the file header, the next section of the program
  begins with the following.
  ,----
  |   ////////////////////////////////////////////////////////////////////////////////
  |   // SEARCH the array of department offsets for the department named on the command line
  |   // Array of dept_offset_t structures comes immediately after file header
  |   dept_offset_t *offsets_arr = (dept_offset_t *) (file_bytes + sizeof(file_header_t));
  `----

  Explain what value the `offsets_arr' variable is assigned and how it
  is used in the remainder of the SEARCH section.

it is assigned to a memory address as well. and used by traversing back and forth in the memory pointer

(D) Final Program Phase
~~~~~~~~~~~~~~~~~~~~~~~

  The final phase of the program begins below
  ,----
  |   ////////////////////////////////////////////////////////////////////////////////
  |   // PRINT out all personnel in the specified department
  |   ...
  |   contact_t *dept_contacts = (contact_t *) (file_bytes + offset);
  `----
  Describe what value `dept_contacts' is assigned and how the final
  phase uses it.

  it is also a memory pointer